// Tiny assetless audio manager using WebAudio oscillators.
// Unlocks on first user gesture; synthesizes concise casino-style blips.

type Tier = 'small'|'med'|'big'|'royal'

class AudioManager {
  private ctx?: AudioContext
  private master?: GainNode
  enabled = true

  init() {
    if (this.ctx) return
    const AC = (window as any).AudioContext || (window as any).webkitAudioContext
    if (!AC) return
    this.ctx = new AC()
    this.master = this.ctx.createGain()
    this.master.gain.value = 0.35
    this.master.connect(this.ctx.destination)
  }

  resume() { this.ctx?.resume?.() }
  toggle(on: boolean) { this.enabled = on }

  private now() { return this.ctx?.currentTime ?? 0 }

  private tone(opts: {
    freq: number
    dur?: number
    type?: OscillatorType
    gain?: number
    attack?: number
    decay?: number
    startAt?: number
  }) {
    if (!this.ctx || !this.master || !this.enabled) return
    const {
      freq,
      dur = 0.08,
      type = 'square',
      gain = 0.35,
      attack = 0.005,
      decay = 0.05,
      startAt
    } = opts

    const t0 = Math.max(this.now() + 0.001, startAt ?? this.now() + 0.001)
    const osc = this.ctx.createOscillator()
    const g = this.ctx.createGain()
    osc.type = type
    osc.frequency.setValueAtTime(freq, t0)
    g.gain.setValueAtTime(0.0001, t0)
    g.gain.linearRampToValueAtTime(gain, t0 + attack)
    // Decay towards near-zero (can't ramp to exactly 0 with exponential)
    g.gain.exponentialRampToValueAtTime(0.0001, t0 + Math.max(attack + decay, dur - 0.01))
    osc.connect(g).connect(this.master)
    osc.start(t0)
    osc.stop(t0 + dur + 0.02)
  }

  click() { this.tone({ freq: 660, dur: 0.045, type: 'square', gain: 0.25 }) }
  clickHi() { this.tone({ freq: 880, dur: 0.05, type: 'square', gain: 0.28 }) }
  thud() { this.tone({ freq: 240, dur: 0.06, type: 'sine', gain: 0.22 }) }

  dealBurst() {
    // 5 quick soft pips (like dealing cards)
    const base = this.now() + 0.01
    for (let i = 0; i < 5; i++) {
      this.tone({ freq: 520 + i * 18, dur: 0.05, type: 'square', gain: 0.22, startAt: base + i * 0.055 })
    }
  }

  draw() { this.tone({ freq: 520, dur: 0.07, type: 'triangle', gain: 0.28 }) }
  holdOn() { this.tone({ freq: 920, dur: 0.06, type: 'sine', gain: 0.22 }) }
  holdOff() { this.tone({ freq: 480, dur: 0.06, type: 'sine', gain: 0.18 }) }

  win(tier: Tier) {
    // Simple arpeggios by tier
    const sets: Record<Tier, number[]> = {
      small: [784, 988],
      med:   [659, 880, 1175],
      big:   [587, 784, 988, 1319],
      royal: [523, 659, 784, 988, 1319, 1760]
    }
    const seq = sets[tier]
    const base = this.now() + 0.02
    const gap = 0.07
    seq.forEach((f, i) => this.tone({
      freq: f,
      dur: 0.09,
      type: 'triangle',
      gain: 0.3,
      attack: 0.01,
      decay: 0.06,
      startAt: base + i * gap
    }))
  }
}

export const audio = new AudioManager()

