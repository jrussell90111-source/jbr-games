import React, { useEffect, useMemo, useState } from 'react'

const BANK_KEY = 'bank_balance'
const CREDITS_KEY = 'credits'
const P_IN_KEY = 'bank_in_total'
const P_OUT_KEY= 'bank_out_total'
const REWARDS_KEY = 'rewards_points'

function readNum(key: string, def = 0) {
  const n = Number(localStorage.getItem(key))
  return Number.isFinite(n) ? n : def
}

export default function BankPanel(){
  // Initialize with defaults (bank starts at $500 if unset)
  const [bank, setBank] = useState<number>(() => {
    const v = localStorage.getItem(BANK_KEY)
    if (v === null) { localStorage.setItem(BANK_KEY, '500'); return 500 }
    return readNum(BANK_KEY, 500)
  })
  const [credits, setCredits] = useState<number>(() => readNum(CREDITS_KEY, 200))
  const [inTotal, setInTotal] = useState<number>(() => readNum(P_IN_KEY, 0))
  const [outTotal, setOutTotal] = useState<number>(() => readNum(P_OUT_KEY, 0))
  const [rewards, setRewards] = useState<number>(() => readNum(REWARDS_KEY, 0))

  // Listen for updates from the game
  useEffect(()=>{
    const onCredits = (e: Event) => {
      const detail = (e as CustomEvent<number>).detail
      if (typeof detail === 'number') setCredits(detail)
      else setCredits(readNum(CREDITS_KEY, 0))
    }
    const onBank = () => setBank(readNum(BANK_KEY, 0))
    const onBankTotals = () => { setInTotal(readNum(P_IN_KEY, 0)); setOutTotal(readNum(P_OUT_KEY, 0)) }
    const onRewards = () => setRewards(readNum(REWARDS_KEY, 0))

    window.addEventListener('app:credits', onCredits as EventListener)
    window.addEventListener('app:bank', onBank)
    window.addEventListener('app:bank_totals', onBankTotals)
    window.addEventListener('app:rewards', onRewards)

    return () => {
      window.removeEventListener('app:credits', onCredits as EventListener)
      window.removeEventListener('app:bank', onBank)
      window.removeEventListener('app:bank_totals', onBankTotals)
      window.removeEventListener('app:rewards', onRewards)
    }
  }, [])

  const netPL = useMemo(()=> outTotal - inTotal, [inTotal, outTotal])

  return (
    <div className="panel">
      <h3>Bank & Rewards</h3>
      <div className="row">Bank: <b>${bank}</b></div>
      <div className="row">Credits: <b>{credits}</b></div>
      <div className="row">Net P/L: <b style={{color: netPL>=0 ? '#77ff77' : '#ff7777'}}>
        {netPL>=0 ? '+' : ''}{netPL}
      </b></div>
      <div className="row">Rewards Points: <b>{rewards}</b></div>
      <small>Net P/L = cash outs âˆ’ inserts. Starting bank: $500.</small>
    </div>
  )
}

