import React from 'react'
import { useGame } from './useGame'
import { PAYTABLE_8_5 } from './payout'
import BankPanel from './BankPanel'
import './styles.css'

function rankShort(rank: string) { return rank === '10' ? '10' : rank[0] }
const ORDER: (keyof typeof PAYTABLE_8_5)[] = [
  'Royal Flush','Straight Flush','Four of a Kind','Full House',
  'Flush','Straight','Three of a Kind','Two Pair','Jacks or Better'
]

// Map rank/suit → filename part in /public/cards
function mapCardToFile(rank: string, suit: string): string {
  let rankName = ''
  switch(rank) {
    case 'A': rankName = 'ace'; break
    case 'J': rankName = 'jack'; break
    case 'Q': rankName = 'queen'; break
    case 'K': rankName = 'king'; break
    default:  rankName = rank.toLowerCase(); break  // 2–10
  }

  const suitName =
    suit === '♠' ? 'spades' :
    suit === '♥' ? 'hearts' :
    suit === '♦' ? 'diamonds' : 'clubs'

  return `${rankName}_of_${suitName}.svg`
}

function CardFace({
  rank, suit, held, onClick
}: { rank: string; suit: string; held: boolean; onClick: () => void }) {
  const fileName = mapCardToFile(rank, suit)

  return (
    <div
      className="card"
      onClick={onClick}
      style={{
        position: 'relative',
        borderRadius: 8,
        overflow: 'hidden',
        boxShadow: '2px 4px 8px rgba(0,0,0,0.25)'
      }}
    >
      <img
        src={`/cards/${fileName}`}
        alt={`${rank} of ${suit}`}
        style={{ width: '100%', height: '100%', objectFit: 'contain' }}
      />
      {held && <div className="holdTag">HOLD</div>}
    </div>
  )
}

function Paytable({ bet }: { bet: number }) {
  return (
    <table className="paytable">
      <thead>
        <tr>
          <th>Hand</th>
          {[1,2,3,4,5].map(n=>(
            <th key={n} className={n===bet ? 'active' : ''}>Bet {n}</th>
          ))}
        </tr>
      </thead>
      <tbody>
        {ORDER.map(hand=>(
          <tr key={hand}>
            <td>{hand}</td>
            {PAYTABLE_8_5[hand].map((payout, i)=>(
              <td key={i} className={i+1===bet ? 'active' : ''}>{payout}</td>
            ))}
          </tr>
        ))}
      </tbody>
    </table>
  )
}

export default function App(){
  const g = useGame()

  return (
    <div className="app">
      <h2 className="title">Video Poker — Jacks or Better (8/5)</h2>

      <div className="layout">
        {/* Game column */}
        <div className="table">
          <div className="row" style={{gap:12}}>
            <div>Credits: <b>{g.credits}</b></div>
            <div>Bet: <b>{g.bet}</b></div>
            <div>Rewards: <b>{g.rewardsPoints}</b></div>
            <div>Accuracy: <b>{g.accCorrect}/{g.accTotal}</b> ({g.accuracyPct}%)</div>
          </div>

          {/* Money controls */}
          <div className="controls" style={{marginTop:8}}>
            <button onClick={()=>g.insert(1)}>Insert $1</button>
            <button onClick={()=>g.insert(5)}>Insert $5</button>
            <button onClick={g.cashOutAll} disabled={g.credits===0}>Cash Out</button>
          </div>

          {/* Betting + actions */}
          <div className="controls">
            <button onClick={()=>g.changeBet(-1)} disabled={!(g.phase==='bet' || g.phase==='show') || g.bet<=1}>-</button>
            <button onClick={()=>g.changeBet(+1)} disabled={!(g.phase==='bet' || g.phase==='show') || g.bet>=5}>+</button>
            <button onClick={g.setMaxBet} disabled={!(g.phase==='bet' || g.phase==='show')}>Max Bet</button>
            <button onClick={g.deal} disabled={!g.canDeal}>Deal</button>
            <button onClick={g.draw} disabled={!g.canDraw}>Draw</button>
          </div>

          {/* Cards */}
          <div className="cards">
            {g.hand.length ? g.hand.map((c, i)=>(
              <CardFace
                key={c.id}
                rank={c.rank}
                suit={c.suit}
                held={g.holds[i]}
                onClick={()=>g.toggleHold(i)}
              />
            )): (
              <p style={{opacity:.7, margin:'16px 0'}}>Tap Deal to begin. Tap cards to HOLD before Draw.</p>
            )}
          </div>

          {/* Outcomes */}
          <div className="payouts">
            {g.initialRank && (
              <div style={{marginTop:6}}>
                Initial deal: <b>{g.initialRank}</b>
              </div>
            )}
            {g.result && (
              <div style={{marginTop:6}}>
                Result: <b>{g.result.rank}</b> &nbsp; Payout: <b>{g.result.payout}</b>
              </div>
            )}
          </div>

          {/* Paytable */}
          <Paytable bet={g.bet} />

          {/* Always-visible note under the paytable */}
          <div style={{marginTop:6, opacity:0.8, fontStyle:'italic'}}>
            8/5 Jacks or Better paytable shown above.
          </div>
        </div>

        {/* Side panel */}
        <BankPanel />
      </div>

      {/* Coaching modal (now uses SVGs) */}
      {g.suggestion && (
        <div className="modal">
          <div className="modalBox">
            <h4>Trainer: A better hold is suggested</h4>
            <p style={{opacity:.85, marginTop:4}}>
              These highlighted cards are the statistically best hold for 8/5 Jacks or Better.
              You have one chance to apply the suggestion this round.
            </p>
            <div className="hintCards">
              {g.hand.map((c, i) => {
                const fileName = mapCardToFile(c.rank, c.suit)
                const keep = g.suggestion![i]
                return (
                  <div key={c.id} className={`hintCard ${keep ? 'keep' : ''}`} title={`${c.rank} ${c.suit}`}>
                    <img src={`/cards/${fileName}`} alt={`${c.rank} of ${c.suit}`} />
                  </div>
                )
              })}
            </div>
            <div className="controls" style={{justifyContent:'flex-end'}}>
              <button onClick={g.acceptSuggestionAndDraw}>Apply &amp; Draw</button>
              <button onClick={g.keepMineAndDraw}>Keep Mine &amp; Draw</button>
            </div>
          </div>
        </div>
      )}

      <small style={{opacity:.6}}>
        Coaching: you’ll be prompted at most once per round. Correct rounds (no prompt) count toward accuracy; prompted rounds score 0.
      </small>
    </div>
  )
}

